/*
 * GameLoadState.java
 * Copyright 2012 Patrick Meade
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.rpgsheet.xcom.state;

import com.rpgsheet.xcom.XcomEditor;
import com.rpgsheet.xcom.render.Button;
import com.rpgsheet.xcom.render.Label;
import com.rpgsheet.xcom.render.Renderable;
import com.rpgsheet.xcom.render.Window;
import com.rpgsheet.xcom.service.UfoResourceService;
import com.rpgsheet.xcom.slick.Palette;
import com.rpgsheet.xcom.type.Language;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.state.BasicGameState;
import org.newdawn.slick.state.StateBasedGame;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import static com.rpgsheet.xcom.service.TextResource.*;
import com.rpgsheet.xcom.slick.Font;
import com.rpgsheet.xcom.type.LabelStyle;

@Component("gameLoadState")
public class GameLoadState extends BasicGameState
{
    /**
     * Generated by Random.Org
     * @see http://www.random.org/cgi-bin/randbyte?nbytes=4&format=h
     */
    public static final int ID = 0x20b1f77e;
    
    @Override
    public int getID() {
        return ID;
    }

    public void init(GameContainer gc, StateBasedGame sbg)
            throws SlickException
    {
        gameButtons = new Button[10];
    }
    
    @Override
    public void enter(GameContainer gc, final StateBasedGame sbg)
    {
        Palette mainPalette = ufoResourceService.getPaletteFull(0);
        Palette imagePalette = ufoResourceService.getPaletteMicro(6);
        Image background = ufoResourceService.getBackground(0, imagePalette);
        String[] geoText = ufoResourceService.getTextGeoscape(xcomEditor.getLanguage());
        Font smallFont = ufoResourceService.getFontSmall();
        Font largeFont = ufoResourceService.getFontLarge();
        
        loadGameWindow = new Window(0, 0, 319, 199, mainPalette, 134, background);

        String selectGameToLoad = geoText[SELECT_GAME_TO_LOAD];
        selectGameTitle = new Label(
            largeFont, mainPalette, 240, 0,
            LabelStyle.SINGLE_LINE_CENTER,
            0, 8, 319, 23, selectGameToLoad);
        
        String cancel = geoText[CANCEL];
        cancelButton = new Button(120, 172, 199, 187, mainPalette, 134, smallFont, 134, cancel,
            new Runnable() {
                public void run() {
                    sbg.enterState(MainMenuState.ID);
                }
            });
        
        for(int i=0; i<10; i++) {
            gameButtons[i] = new Button(10, i*14+32, 33, i*14+43, mainPalette, 134, smallFont, 134, String.valueOf(i+1),
                new Runnable() {
                    public void run() {
                        System.err.println("Loading game...");
                    }
                });
        }
    }

    public void render(GameContainer gc, StateBasedGame sbg, Graphics g)
            throws SlickException
    {
        loadGameWindow.render(gc, g);
        selectGameTitle.render(gc, g);
        cancelButton.render(gc, g);
        for(int i=0; i<10; i++) {
            gameButtons[i].render(gc, g);
        }
    }

    public void update(GameContainer gc, StateBasedGame sbg, int timeDelta)
            throws SlickException
    {
        // there is nothing to update
    }

    @Override
    public void mousePressed(int button, int x, int y)
    {
        cancelButton.mousePressed(button, x, y);
        for(int i=0; i<10; i++) {
            gameButtons[i].mousePressed(button, x, y);
        }
    }
    
    @Override
    public void mouseReleased(int button, int x, int y)
    {
        cancelButton.mouseReleased(button, x, y);
        for(int i=0; i<10; i++) {
            gameButtons[i].mouseReleased(button, x, y);
        }
    }
    
    private Renderable loadGameWindow;
    private Renderable selectGameTitle;

    private Button cancelButton;
    private Button[] gameButtons;
    
    @Autowired private UfoResourceService ufoResourceService;
    @Autowired private XcomEditor xcomEditor;
}
